{"EDITOR_STATE":{"allProjectFiles":{"892dc819-21f0-43ea-9ed8-9f52e1835258":{"id":"892dc819-21f0-43ea-9ed8-9f52e1835258","parent":null,"name":"tweetmon","type":"DIRECTORY","isDirectory":true,"children":["e95a8672-a07b-499c-89f2-7c167baced52"],"isRemovable":false,"filePath":"tweetmon"},"e95a8672-a07b-499c-89f2-7c167baced52":{"id":"e95a8672-a07b-499c-89f2-7c167baced52","parent":"892dc819-21f0-43ea-9ed8-9f52e1835258","name":"lambda.js","type":"LAMBDA_FILE","isDirectory":false,"children":[],"isRemovable":true,"filePath":"tweetmon/lambda.js","code":"let AWS = require('aws-sdk');\nconst ddb = new AWS.DynamoDB.DocumentClient();\n\nconst Twitter = require('twitter');\n\nconst twitter = new Twitter({\n  consumer_key: process.env.TWITTER_CONSUMER_KEY,\n  consumer_secret: process.env.TWITTER_CONSUMER_SECRET,\n});\n\nexports.handler = function (event, context, callback) {\n\n\tddb.get({\n\t\tTableName: 'tweetmon',\n\t\tKey: { 'key': 'last_checkpoint' }\n\t}, function (err, data) {\n\t\tif (err) {\n\t\t\t//handle error\n\t\t\tconsole.error(err);\n\t\t} else {\n\t\t\t//your logic goes here\n\t\t\tconsole.log(data);\n\t\t}\n\t});\n\n\tcallback(null, 'Successfully executed');\n}\n","triggers":[{"resourceName":"cwerepeatinminutes","config":{}}],"config":{"memory":128,"timeout":30,"runtime":"nodejs8.10"},"version":82,"testCases":{"afd94a48-aef6-4740-9082-afb8e0ab274b":{"id":"afd94a48-aef6-4740-9082-afb8e0ab274b","name":"dummy event","functionId":"e95a8672-a07b-499c-89f2-7c167baced52","event":"{\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    \"key3\": \"value3\"\n}"}},"syncVersion":30,"references":[]}},"rootNode":"892dc819-21f0-43ea-9ed8-9f52e1835258","openFiles":["e95a8672-a07b-499c-89f2-7c167baced52"],"currentFileId":"e95a8672-a07b-499c-89f2-7c167baced52","resources":{"cwerepeatinminutes":{"name":"cwerepeatinminutes","type":"CLOUD_WATCH","config":{"mode":0,"name":"repeatinminutes","description":"","scheduleExpression":"rate(1 minute)"},"globallyEditable":true},"ddbtweetmon":{"name":"ddbtweetmon","type":"DynamoDB","config":{"mode":0,"operation":"get","table":{"arn":"","name":"tweetmon","partitionKey":"key","partitionKeyType":"S","hasSortKey":false,"sortKey":"","sortKeyType":"S","mode":0},"parameters":{"Key":{"key":"last_checkpoint"},"Item":{},"ExpressionAttributeValues":{}},"validator":{"validatableFields":{},"validity":true},"valid":true},"globallyEditable":false}},"envVariables":[{"lambdaId":"all","varKey":"SIGMA_AWS_ACC_ID","varValue":null,"shouldPersist":false,"editable":false},{"lambdaId":"e95a8672-a07b-499c-89f2-7c167baced52","varKey":"TWITTER_CONSUMER_KEY","varValue":null,"shouldPersist":false,"editable":true},{"lambdaId":"e95a8672-a07b-499c-89f2-7c167baced52","varKey":"TWITTER_CONSUMER_SECRET","varValue":null,"shouldPersist":false,"editable":true}],"packageJSON":{"dependencies":{"aws-sdk":{"name":"aws-sdk","version":"2.176.0","notRemovable":true},"twitter":{"name":"twitter","downloadsLast30Days":51205,"downloadsRatio":0.00032130485184729,"humanDownloadsLast30Days":"51.2k","popular":false,"version":"1.7.1","versions":{"0.1.0":"2010-12-22T05:52:58.593Z","0.1.1":"2010-12-22T16:01:47.334Z","0.1.2":"2010-12-23T17:11:40.802Z","0.1.3":"2010-12-24T06:08:16.929Z","0.1.4":"2010-12-29T04:16:24.841Z","0.1.5":"2010-12-31T12:07:12.106Z","0.1.6":"2011-01-02T04:30:17.091Z","0.1.7":"2011-01-04T09:39:24.216Z","0.1.8":"2011-01-04T13:18:03.382Z","0.1.9":"2011-01-04T16:51:24.583Z","0.1.10":"2011-01-05T03:16:36.081Z","0.1.11":"2011-01-10T00:25:52.593Z","0.1.12":"2011-01-13T00:44:15.145Z","0.1.13":"2011-01-14T02:41:17.602Z","0.1.14":"2011-02-08T06:28:42.596Z","0.1.15":"2011-02-18T12:07:29.127Z","0.1.16":"2011-02-19T04:45:55.323Z","0.1.17":"2011-05-08T05:45:39.954Z","0.1.18":"2012-03-06T17:02:09.893Z","0.2.0":"2013-07-18T14:58:52.321Z","0.2.1":"2013-07-18T15:47:16.583Z","0.2.2":"2013-09-06T11:24:04.793Z","0.2.3":"2013-09-23T13:59:31.490Z","0.2.4":"2013-10-23T18:02:22.755Z","0.1.19":"2013-11-13T03:14:05.430Z","0.2.5":"2013-11-13T03:27:37.459Z","0.2.6":"2014-02-21T12:47:24.881Z","0.2.7":"2014-02-24T00:01:22.544Z","0.2.8":"2014-03-05T14:09:24.017Z","0.2.9":"2014-03-13T11:54:15.161Z","0.2.10":"2014-09-07T22:52:19.842Z","0.2.11":"2014-09-07T23:13:56.509Z","0.2.12":"2014-09-09T17:11:29.141Z","0.2.13":"2014-10-28T21:46:12.068Z","1.0.0":"2014-12-13T21:55:03.189Z","1.0.1":"2014-12-13T23:28:09.153Z","1.0.2":"2015-01-08T14:34:24.115Z","1.0.3":"2015-01-16T00:58:11.887Z","1.1.0":"2015-01-24T23:47:09.495Z","1.2.0":"2015-01-25T22:30:11.654Z","1.2.1":"2015-01-25T23:45:02.437Z","1.2.2":"2015-03-07T14:22:52.362Z","1.2.3":"2015-03-07T14:26:00.856Z","1.2.4":"2015-03-12T22:29:15.073Z","1.2.5":"2015-03-16T21:37:10.207Z","1.3.0":"2016-05-14T16:12:51.703Z","1.4.0":"2016-08-03T18:36:37.966Z","1.5.0":"2016-12-02T14:36:51.312Z","1.6.0":"2016-12-11T03:27:55.299Z","1.7.0":"2016-12-11T20:31:40.900Z","1.7.1":"2017-06-13T11:48:37.477Z"},"tags":{"latest":"1.7.1"},"description":"Twitter API client library for node.js","dependencies":{"deep-extend":"^0.5.0","request":"^2.72.0"},"devDependencies":{"eslint":"^3.12.0","mocha":"^3.2.0","nock":"^9.0.2"},"repository":{"url":"https://github.com/desmondmorris/node-twitter","project":"node-twitter","user":"desmondmorris","host":"github.com","path":"","head":"296e82ede50ddace34ad64952fdfacfe8b1c65fc","branch":"296e82ede50ddace34ad64952fdfacfe8b1c65fc"},"githubRepo":{"user":"desmondmorris","project":"node-twitter","path":"","head":"296e82ede50ddace34ad64952fdfacfe8b1c65fc"},"gitHead":"296e82ede50ddace34ad64952fdfacfe8b1c65fc","readme":"# Twitter for Node.js\n\nAn asynchronous client library for the Twitter [REST](https://dev.twitter.com/rest/public) and [Streaming](https://dev.twitter.com/streaming/overview) API's.\n\n[![Build Status](https://travis-ci.org/desmondmorris/node-twitter.svg?branch=master)](https://travis-ci.org/desmondmorris/node-twitter)\n [![NPM](https://nodei.co/npm/twitter.png?mini=true)](https://nodei.co/npm/twitter/)\n\n```javascript\nvar Twitter = require('twitter');\n\nvar client = new Twitter({\n  consumer_key: '',\n  consumer_secret: '',\n  access_token_key: '',\n  access_token_secret: ''\n});\n\nvar params = {screen_name: 'nodejs'};\nclient.get('statuses/user_timeline', params, function(error, tweets, response) {\n  if (!error) {\n    console.log(tweets);\n  }\n});\n```\n\n## Installation\n\n`npm install twitter`\n\n## Quick Start\n\nYou will need valid Twitter developer credentials in the form of a set of consumer and access tokens/keys.  You can get these [here](https://apps.twitter.com/).  Do not forgot to adjust your permissions - most POST request require write permissions.\n\n```javascript\nvar Twitter = require('twitter');\n```\n\n## For User based authentication:\n\n```javascript\nvar client = new Twitter({\n  consumer_key: '',\n  consumer_secret: '',\n  access_token_key: '',\n  access_token_secret: ''\n});\n```\n\nAdd your credentials accordingly.  I would use environment variables to keep your private info safe.  So something like:\n\n```javascript\nvar client = new Twitter({\n  consumer_key: process.env.TWITTER_CONSUMER_KEY,\n  consumer_secret: process.env.TWITTER_CONSUMER_SECRET,\n  access_token_key: process.env.TWITTER_ACCESS_TOKEN_KEY,\n  access_token_secret: process.env.TWITTER_ACCESS_TOKEN_SECRET\n});\n```\n## For Application Only based authentication:\n\nYou will need to fetch a bearer token from Twitter as documented [Here](https://dev.twitter.com/oauth/application-only), once you have it you can use it as follows.\n\n```javascript\nvar client = new Twitter({\n  consumer_key: '',\n  consumer_secret: '',\n  bearer_token: ''\n});\n```\n\nAdd your credentials accordingly.  I would use environment variables to keep your private info safe.  So something like:\n\n```javascript\nvar client = new Twitter({\n  consumer_key: process.env.TWITTER_CONSUMER_KEY,\n  consumer_secret: process.env.TWITTER_CONSUMER_SECRET,\n  bearer_token: process.env.TWITTER_BEARER_TOKEN\n});\n```\n\nNB - You will not have access to all endpoints whilst using Application Only authentication, but you will have access to higher API limits.\n\n## Requests\n\nYou now have the ability to make GET and POST requests against the API via the convenience methods.\n\n```javascript\nclient.get(path, params, callback);\nclient.post(path, params, callback);\nclient.stream(path, params, callback);\n```\n\n## REST API\n\nYou simply need to pass the endpoint and parameters to one of convenience methods.  Take a look at the [documentation site](https://dev.twitter.com/rest/public) to reference available endpoints.\n\nExample, lets get a [list of favorites](https://dev.twitter.com/rest/reference/get/favorites/list):\n\n```javascript\nclient.get('favorites/list', function(error, tweets, response) {\n  if(error) throw error;\n  console.log(tweets);  // The favorites.\n  console.log(response);  // Raw response object.\n});\n```\n\nHow about an example that passes parameters?  Let's  [tweet something](https://dev.twitter.com/rest/reference/post/statuses/update):\n\n```javascript\nclient.post('statuses/update', {status: 'I Love Twitter'},  function(error, tweet, response) {\n  if(error) throw error;\n  console.log(tweet);  // Tweet body.\n  console.log(response);  // Raw response object.\n});\n```\n\n### Promises\n\nThe REST API convenience methods will also return Promises if:\n\n1.  A callback is omitted\n2.  Promise's are available.\n\nIf those two conditions are met, the above example becomes:\n\n```javascript\nclient.post('statuses/update', {status: 'I Love Twitter'})\n  .then(function (tweet) {\n    console.log(tweet);\n  })\n  .catch(function (error) {\n    throw error;\n  })\n```\n\nNote, the raw `response` object returned by the Request module is not passed through\nthe fulfilled promise.  If you require this, please use the callback pattern.\n\n## Streaming API\n\nUsing the `stream` convenience method, you to open and manipulate data via a stream piped directly from one of the streaming API's. Let's see who is talking about javascript:\n\n```javascript\nvar stream = client.stream('statuses/filter', {track: 'javascript'});\nstream.on('data', function(event) {\n  console.log(event && event.text);\n});\n\nstream.on('error', function(error) {\n  throw error;\n});\n\n// You can also get the stream in a callback if you prefer.\nclient.stream('statuses/filter', {track: 'javascript'}, function(stream) {\n  stream.on('data', function(event) {\n    console.log(event && event.text);\n  });\n\n  stream.on('error', function(error) {\n    throw error;\n  });\n});\n```\n\n**Note** twitter stream several types of events, see [the docs](https://dev.twitter.com/streaming/overview/messages-types) for more info. There is no canonical way of detecting tweets versus other messages, but some users have had success with the following strategy.\n\n```javascript\n_ = require('lodash')\nconst isTweet = _.conforms({\n  contributors: _.isObject,\n  id_str: _.isString,\n  text: _.isString,\n})\n```\n\n## Examples\n\n* [Tweet](https://github.com/desmondmorris/node-twitter/tree/master/examples#tweet)\n* [Search](https://github.com/desmondmorris/node-twitter/tree/master/examples#search)\n* [Streams](https://github.com/desmondmorris/node-twitter/tree/master/examples#streams)\n* [Proxy](https://github.com/desmondmorris/node-twitter/tree/master/examples#proxy)\n* [Media](https://github.com/desmondmorris/node-twitter/tree/master/examples#media)\n* [Chunked Media](https://github.com/desmondmorris/node-twitter/tree/master/examples#chunked-media)\n\n## Contributors\n\nOriginally authored by  [@technoweenie](http://github.com/technoweenie)\n and maintained by [@jdub](http://github.com/jdub)\n\nCurrently maintained by [@desmondmorris](http://github.com/desmondmorris)\n\n[And we cannot forget the community](https://github.com/desmondmorris/node-twitter/graphs/contributors)\n","owner":{"name":"desmondmorris","avatar":"https://github.com/desmondmorris.png","link":"https://github.com/desmondmorris"},"deprecated":false,"homepage":null,"license":"MIT","keywords":["twitter","streaming","oauth"],"computedKeywords":[],"computedMetadata":{},"created":1292997177962,"modified":1519392930775,"lastPublisher":{"name":"desmondmorris","email":"hi@desmondmorris.com","avatar":"https://gravatar.com/avatar/d2c4b9870bcda92115a5be8a1076de95","link":"https://www.npmjs.com/~desmondmorris"},"owners":[{"name":"desmondmorris","email":"hi@desmondmorris.com","avatar":"https://gravatar.com/avatar/d2c4b9870bcda92115a5be8a1076de95","link":"https://www.npmjs.com/~desmondmorris"}],"lastCrawl":"2018-06-04T16:28:59.487Z","_searchInternal":{"concatenatedName":"twitter","alternativeNames":["twitter","twitter","twitter"],"downloadsMagnitude":5},"dependents":209,"humanDependents":"209","changelogFilename":null,"objectID":"twitter","_highlightResult":{"name":{"value":"<em>twitter</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["twitter"]},"description":{"value":"<em>Twitter</em> API client library for node.js","matchLevel":"full","fullyHighlighted":false,"matchedWords":["twitter"]},"owner":{"name":{"value":"desmondmorris","matchLevel":"none","matchedWords":[]}},"keywords":[{"value":"<em>twitter</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["twitter"]},{"value":"streaming","matchLevel":"none","matchedWords":[]},{"value":"oauth","matchLevel":"none","matchedWords":[]}],"owners":[{"name":{"value":"desmondmorris","matchLevel":"none","matchedWords":[]}}],"_searchInternal":{"alternativeNames":[{"value":"<em>twitter</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["twitter"]},{"value":"<em>twitter</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["twitter"]},{"value":"<em>twitter</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["twitter"]}]}},"types":"// Type definitions for Twitter for Websites\r\n// Project: https://dev.twitter.com/web/\r\n// Definitions by: Chitoku <https://github.com/chitoku-k>\r\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\r\n\r\n/**\r\n * The interface for Twitter for Websites.\r\n */\r\ninterface Twitter {\r\n    /**\r\n     * All JavaScript code depending on widgets.js should execute on or after this function.\r\n     *\r\n     * @param callback A callback function which will be invoked when widgets.js is ready.\r\n     */\r\n    ready(callback: (twttr: Twitter) => void): void;\r\n    /**\r\n     * Twitter widgets.\r\n     */\r\n    widgets: TwitterWidgets;\r\n    /**\r\n     * Twitter events.\r\n     */\r\n    events: TwitterEvents;\r\n}\r\n\r\n/**\r\n * The interface for Twitter for Websites widgets.\r\n */\r\ninterface TwitterWidgets {\r\n    /**\r\n     * Initialize Twitter for Websites widgets contained within a page.\r\n     */\r\n    load(): void;\r\n    /**\r\n     * Initialize Twitter for Websites widgets contained within children of the element.\r\n     */\r\n    load(element: HTMLElement): void;\r\n    /**\r\n     * Initialize Twitter for Websites widgets contained within children of the elements.\r\n     */\r\n    load(elements: HTMLElement[]): void;\r\n    /**\r\n     * Create a share button for a URL.\r\n     *\r\n     * @param url The URL to be shared.\r\n     * @param target The element in which to render the widget.\r\n     * @param options An object hash of additional options to configure the widget.\r\n     */\r\n    createShareButton(url: string, target: HTMLElement, options?: TwitterButtonWidgetOptions): Promise<HTMLElement>;\r\n    /**\r\n     * Create a follow button for a user.\r\n     *\r\n     * @param screen_name The screen_name of a user to be followed.\r\n     * @param target The element in which to render the widget.\r\n     * @param options An object hash of additional options to configure the widget.\r\n     */\r\n    createFollowButton(screen_name: string, target: HTMLElement, options?: TwitterButtonWidgetOptions): Promise<HTMLElement>;\r\n    /**\r\n     * Create a hashtag button for a hashtag.\r\n     *\r\n     * @param hashtag Hashtag to be Tweeted and displayed on the button.\r\n     * @param target The element in which to render the widget.\r\n     * @param options An object hash of additional options to configure the widget.\r\n     */\r\n    createHashtagButton(hashtag: string, target: HTMLElement, options?: TwitterButtonWidgetOptions): Promise<HTMLElement>;\r\n    /**\r\n     * Create a mention button for a user.\r\n     *\r\n     * @param screen_name The screen_name of a user to be mentioned.\r\n     * @param target The element in which to render the widget.\r\n     * @param options An object hash of additional options to configure the widget.\r\n     */\r\n    createMentionButton(screen_name: string, target: HTMLElement, options?: TwitterButtonWidgetOptions): Promise<HTMLElement>;\r\n    /**\r\n     * Create a timeline widget.\r\n     *\r\n     * @param widgetId The ID of a timeline widget to be rendered.\r\n     * @param target The element in which to render the widget.\r\n     * @param options An object hash of additional options to configure the widget.\r\n     */\r\n    createTimeline(widgetId: string, target: HTMLElement, options?: TwitterTimelineWidgetOptions): Promise<HTMLElement>;\r\n    /**\r\n     * Create an embedded Tweet for a Tweet.\r\n     *\r\n     * @param tweetId The ID of a Tweet to be rendered.\r\n     * @param target The element in which to render the widget.\r\n     * @param options An object hash of additional options to configure the widget.\r\n     */\r\n    createTweet(tweetId: string, target: HTMLElement, options?: TwitterTweetWidgetOptions): Promise<HTMLElement>;\r\n}\r\n\r\n/**\r\n * The interface for additional configuration for all widgets.\r\n */\r\ninterface TwitterWidgetOptions {\r\n    /**\r\n     * Enable Do Not Track for this widget.\r\n     */\r\n    dnt?: boolean;\r\n    /**\r\n     * A list of hashtags to be appended to default Tweet text where appropriate.\r\n     */\r\n    hashtags?: string;\r\n    /**\r\n     * The language in which to render a widget, if supported.\r\n     */\r\n    lang?: string;\r\n    /**\r\n     * A list of Twitter screen names to be suggested for following after a Tweet is posted.\r\n     */\r\n    related?: string;\r\n    /**\r\n     * A Twitter user mentioned in the default Tweet text as /via @user where appropriate.\r\n     */\r\n    via?: string;\r\n}\r\n\r\n/**\r\n * The interface for additional configuration for button widgets.\r\n */\r\ninterface TwitterButtonWidgetOptions extends TwitterWidgetOptions {\r\n    /**\r\n     * The alignment of the button within an iframe; use this to ensure flush layout when aligning buttons against opposite edges of your grid.\r\n     */\r\n    align?: string;\r\n    /**\r\n     * Share button and Follow button only. (Vertical count only available for share buttons.)\r\n     */\r\n    count?: string;\r\n    /**\r\n     * If the canonical URL to be counted is different from the URL to be shared, you can provide this URL to reference the count. (Share button only.)\r\n     */\r\n    counturl?: string;\r\n    /**\r\n     * medium or large\r\n     */\r\n    size?: string;\r\n    /**\r\n     * The default, highlighted text a user sees in the Tweet Web Intent.\r\n     */\r\n    text?: string;\r\n}\r\n\r\n/**\r\n * The interface for additional options for embedded Tweets.\r\n */\r\ninterface TwitterTweetWidgetOptions extends TwitterWidgetOptions {\r\n    /**\r\n     * Float the embedded Tweet to the left or right so that text wraps around it, or align center so it floats in the middle of a paragraph.\r\n     */\r\n    align?: string;\r\n    /**\r\n     * For Tweets that are replies, the previous Tweet in the thread will be displayed by default. Use none to hide the thread and show a Tweet alone.\r\n     */\r\n    conversation?: string;\r\n    /**\r\n     * Toggle whether to render expanded media through Twitter Cards in Tweets. Also applies to images uploaded to Twitter.\r\n     */\r\n    cards?: string;\r\n    /**\r\n     * Fix the width of the embedded widget.\r\n     */\r\n    width?: string|number;\r\n    /**\r\n     * Adjust the color of links inside the widget.\r\n     */\r\n    linkColor?: string;\r\n    /**\r\n     * Toggle the default colorscheme of the widget.\r\n     */\r\n    theme?: string;\r\n}\r\n\r\n/**\r\n * The interface for additional options for embedded Timelines.\r\n */\r\ninterface TwitterTimelineWidgetOptions extends TwitterWidgetOptions, TwitterButtonWidgetOptions, TwitterTweetWidgetOptions {\r\n    /**\r\n     * Apply the specified aria-polite behavior to the rendered timeline.\r\n     */\r\n    ariaPolite?: string;\r\n    /**\r\n     * Fix the height of the embedded widget.\r\n     */\r\n    height?: string|number;\r\n    /**\r\n     * Adjust the color of borders inside the widget.\r\n     */\r\n    borderColor?: string;\r\n    /**\r\n     * Toggle the display of design elements in the widget. This parameter is a space-separated list of values.\r\n     */\r\n    chrome?: string;\r\n    /**\r\n     * Render a timeline statically, displaying only n number of Tweets.\r\n     */\r\n    tweetLimit?: number;\r\n    /**\r\n     * Override the timeline source with this userâs Tweets.\r\n     */\r\n    screenName?: string;\r\n    /**\r\n     * Override the timeline source with this userâs Tweets.\r\n     */\r\n    userId?: string;\r\n    /**\r\n     * When overriding a user timeline, include Tweets that are in reply to to other users.\r\n     */\r\n    showReplies?: boolean;\r\n    /**\r\n     * Override the timeline source with favourite Tweets from this user.\r\n     */\r\n    favoritesScreenName?: string;\r\n    /**\r\n     * Override the timeline source with favourite Tweets from this user.\r\n     */\r\n    favoritesUserId?: string;\r\n    /**\r\n     * Override the timeline source with Tweets from a list owned by this user. Must be used in combination with listId or listSlug.\r\n     */\r\n    listOwnerScreenName?: string;\r\n    /**\r\n     * Override the timeline source with Tweets from a list owned by this user. Must be used in combination with listId or listSlug.\r\n     */\r\n    listOwnerId?: string;\r\n    /**\r\n     * Override the timeline source with Tweets from this list. Must be used in combination with listOwnerId or listOwnerScreenName.\r\n     */\r\n    listId?: string;\r\n    /**\r\n     * Override the timeline source with Tweets from this list. Must be used in combination with listOwnerId or listOwnerScreenName.\r\n     */\r\n    listSlug?: string;\r\n}\r\n\r\n/**\r\n * The interface for Twitter events.\r\n */\r\ninterface TwitterEvents {\r\n    /**\r\n     * Occurs after twttr.widgets.load has initialized widgets in a page, from an embed code. Includes an array of references to the newly created widget nodes.\r\n     *\r\n     * @param name The name of an event.\r\n     * @param callback A callback function which will be invoked.\r\n     */\r\n    bind(name: \"loaded\", callback: (ev: any) => void): void;\r\n    /**\r\n     * Bind an event occurs after an individual widget in a page is rendered. Includes a of reference to the newly created widget node. Occurs at the same time as loaded, but for each individual widget. Also triggered when creating a widget with a factory function.\r\n     *\r\n     * @param name The name of an event.\r\n     * @param callback A callback function which will be invoked.\r\n     */\r\n    bind(name: \"rendered\", callback: (ev: any) => void): void;\r\n    /**\r\n     * Bind an event which will be triggered when the user publishes a Tweet (either new, or a reply) through the Tweet Web Intent.\r\n     *\r\n     * @param name The name of an event.\r\n     * @param callback A callback function which will be invoked.\r\n     */\r\n    bind(name: \"tweet\", callback: (ev: TwitterIntentEvent) => void): void;\r\n    /**\r\n     * Bind an event which will populate the followed user_id in the event objectâs data argument.\r\n     *\r\n     * @param name The name of an event.\r\n     * @param callback A callback function which will be invoked.\r\n     */\r\n    bind(name: \"follow\", callback: (ev: TwitterIntentEvent) => void): void;\r\n    /**\r\n     * Bind an event which will populate the original Tweet that was retweetedâs source_tweet_id in the event objectâs data argument.\r\n     *\r\n     * @param name The name of an event.\r\n     * @param callback A callback function which will be invoked.\r\n     */\r\n    bind(name: \"retweet\", callback: (ev: TwitterIntentEvent) => void): void;\r\n    /**\r\n     * Bind an event which will populate the favorited tweet_id in the event objectâs data argument.\r\n     *\r\n     * @param name The name of an event.\r\n     * @param callback A callback function which will be invoked.\r\n     */\r\n    bind(name: \"favorite\", callback: (ev: TwitterIntentEvent) => void): void;\r\n    /**\r\n     * Bind an event occurs when the user invokes a Web Intent from within an embedded widget.\r\n     *\r\n     * @param name The name of an event.\r\n     * @param callback A callback function which will be invoked.\r\n     */\r\n    bind(name: \"click\", callback: (ev: TwitterIntentEvent) => void): void;\r\n    /**\r\n     * Bind an event.\r\n     *\r\n     * @param name The name of an event.\r\n     * @param callback A callback function which will be invoked.\r\n     */\r\n    bind(name: string, callback: (ev: any) => void): void;\r\n}\r\n\r\n/**\r\n * The interface for an object representing the event is passed to your JavaScript callback.\r\n */\r\ninterface TwitterIntentEvent {\r\n    /**\r\n     * The DOM node where the widget is instantiated. Most like an iframe, but may also be the original embed code element if the widget failed to initialize, or another sandboxed element. Use this value to differentiate between different intents or buttons on the same page.\r\n     */\r\n    target: HTMLElement;\r\n    /**\r\n     * Extended detail indicating where in a widget a user clicked. For example, button, count, or screen name portions of Tweet button or Follow button integrations, or tweet actions within embedded Tweets.\r\n     */\r\n    region: string;\r\n    /**\r\n     * Key/value pairs relevant to the Web Intent just actioned.\r\n     */\r\n    data: TwitterIntentEventData;\r\n    /**\r\n     * The type of the event.\r\n     */\r\n    type: string;\r\n}\r\n\r\n/**\r\n * The interface for a data relevants to the Web Intent just actioned.\r\n */\r\ninterface TwitterIntentEventData {\r\n    /**\r\n     * The ID of a Tweet.\r\n     */\r\n    tweet_id?: string;\r\n    /**\r\n     * The ID of a source Tweet.\r\n     */\r\n    source_tweet_id?: string;\r\n    /**\r\n     * The screen_name of a user;\r\n     */\r\n    screen_name?: string;\r\n    /**\r\n     * The ID of a user.\r\n     */\r\n    user_id?: string;\r\n}\r\n\r\ndeclare var twttr: Twitter;\r\n","typesLocation":"https://unpkg.com/@types/twitter/index.d.ts"}}},"lambdaId":"e95a8672-a07b-499c-89f2-7c167baced52","additionalFiles":[]},"PROJECT_META":{"projectName":"tweetmon","projectDescription":"monitor on retweet","projectVersion":"1.0.0","projectRegion":"us-west-1","repoName":"tweetmon","repoUrl":"https://github.com/antmanler/tweetmon","lastSave":1529230768449}}