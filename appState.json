{"EDITOR_STATE":{"allProjectFiles":{"892dc819-21f0-43ea-9ed8-9f52e1835258":{"id":"892dc819-21f0-43ea-9ed8-9f52e1835258","parent":null,"name":"tweetmon","type":"DIRECTORY","isDirectory":true,"children":["e95a8672-a07b-499c-89f2-7c167baced52"],"isRemovable":false,"filePath":"tweetmon"},"e95a8672-a07b-499c-89f2-7c167baced52":{"id":"e95a8672-a07b-499c-89f2-7c167baced52","parent":"892dc819-21f0-43ea-9ed8-9f52e1835258","name":"lambda.js","type":"LAMBDA_FILE","isDirectory":false,"children":[],"isRemovable":true,"filePath":"tweetmon/lambda.js","code":"let AWS = require('aws-sdk');\nconst ddb = new AWS.DynamoDB.DocumentClient();\n\nconst Twitter = require('twitter');\n\nconst twitter = new Twitter({\n\tconsumer_key: process.env.TWITTER_CONSUMER_KEY,\n\tconsumer_secret: process.env.TWITTER_CONSUMER_SECRET,\n\taccess_token_key: process.env.TWITTER_ACCESS_TOKEN_KEY,\n\taccess_token_secret: process.env.TWITTER_ACCESS_TOKEN_SECRET,\n});\n\nconst user_id = process.env.TWITTER_USER_ID;\n\n// Require mail libraries for Mailgun\nconst nodemailer = require('nodemailer');\nconst mg = require('nodemailer-mailgun-transport');\nconst mailgun = nodemailer.createTransport(mg({\n\tauth: {\n\t\tapi_key: process.env.MAILGUN_API_KEY,\n\t\tdomain: process.env.MAILGUN_DOMAIN,\n\t},\n}));\n\nexports.handler = function (event, context, callback) {\n\tddb.get({\n\t\tTableName: 'tweetmon',\n\t\tKey: { 'key': 'last_checkpoint' },\n\t}, (err, data) => {\n\t\tif (err) {\n\t\t\tconsole.error('ddb get error:', err);\n\t\t\treturn;\n\t\t}\n\t\tconst { Item: { since_id} } = data || {Item:{}};\n\t\tconsole.log('since_id:', since_id, data);\n\t\ttwitter.get(\n\t\t\t'statuses/user_timeline',\n\t\t\t{\n\t\t\t\tuser_id,\n\t\t\t\tsince_id,\n\t\t\t\texclude_replies: true,\n\t\t\t\ttweet_mode: 'extended',\n\t\t\t},\n\t\t\t(error, tweets, response) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tconsole.error('twitter api failed:', error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttweets.forEach((t, idx) => {\n\t\t\t\t\tif (idx === 0) {\n\t\t\t\t\t\t// remeber last checkpoint\n\t\t\t\t\t\tddb.put({\n\t\t\t\t\t\t\tTableName: 'tweetmon',\n\t\t\t\t\t\t\tItem: {\n\t\t\t\t\t\t\t\tkey: 'last_checkpoint',\n\t\t\t\t\t\t\t\t'since_id': t.id_str\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}, (err, data) => {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\tconsole.error('ddb put error:', err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t// For the very first invocation, \n\t\t\t\t\t// we just write down the since id\n\t\t\t\t\tif (!since_id) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// send tweet to mail\n\t\t\t\t\tcontent = JSON.stringify(t);\n\t\t\t\t\tmailgun.sendMail({\n\t\t\t\t\t\tfrom: process.env.MAILGUN_FROM,\n\t\t\t\t\t\tto: process.env.MAILGUN_TO,\n\t\t\t\t\t\tsubject: `tweet from ${t.user.screen_name}`,\n\t\t\t\t\t\ttext: content,\n\t\t\t\t\t\tattachments: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfilename: 'tweet.json',\n\t\t\t\t\t\t\t\tcontentType: 'application/json',\n\t\t\t\t\t\t\t\tcontent,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t}, (err, info) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tconsole.log('failed to send mail:', err);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconsole.info(`send to ${process.env.MAILGUN_TO} for tid: ${t.id_str}`);\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t},\n\t\t);\n\t});\n\n\tcallback(null, 'Successfully executed');\n}\n","triggers":[{"resourceName":"cwerepeatinminutes","config":{}}],"config":{"memory":128,"timeout":30,"runtime":"nodejs8.10"},"version":984,"testCases":{"afd94a48-aef6-4740-9082-afb8e0ab274b":{"id":"afd94a48-aef6-4740-9082-afb8e0ab274b","name":"dummy event","functionId":"e95a8672-a07b-499c-89f2-7c167baced52","event":"{\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    \"key3\": \"value3\"\n}"}},"syncVersion":390,"references":[]}},"rootNode":"892dc819-21f0-43ea-9ed8-9f52e1835258","openFiles":["e95a8672-a07b-499c-89f2-7c167baced52"],"currentFileId":"e95a8672-a07b-499c-89f2-7c167baced52","resources":{"cwerepeatinminutes":{"name":"cwerepeatinminutes","type":"CLOUD_WATCH","config":{"mode":0,"name":"repeatinminutes","description":"","scheduleExpression":"rate(1 minute)"},"globallyEditable":true},"ddbtweetmon":{"name":"ddbtweetmon","type":"DynamoDB","config":{"mode":0,"operation":"put","table":{"arn":"","name":"tweetmon","partitionKey":"key","partitionKeyType":"S","hasSortKey":false,"sortKey":"","sortKeyType":"S","mode":0},"parameters":{"Key":{},"Item":{"since_id":"@{t.id_str}"},"ExpressionAttributeValues":{}},"validator":{"validatableFields":{},"validity":true},"valid":true},"globallyEditable":false}},"envVariables":[{"lambdaId":"all","varKey":"SIGMA_AWS_ACC_ID","varValue":null,"shouldPersist":false,"editable":false},{"lambdaId":"e95a8672-a07b-499c-89f2-7c167baced52","varKey":"TWITTER_CONSUMER_KEY","varValue":null,"shouldPersist":false,"editable":true},{"lambdaId":"e95a8672-a07b-499c-89f2-7c167baced52","varKey":"TWITTER_CONSUMER_SECRET","varValue":null,"shouldPersist":false,"editable":true},{"lambdaId":"e95a8672-a07b-499c-89f2-7c167baced52","varKey":"TWITTER_ACCESS_TOKEN_KEY","varValue":null,"shouldPersist":false,"editable":true},{"lambdaId":"e95a8672-a07b-499c-89f2-7c167baced52","varKey":"TWITTER_ACCESS_TOKEN_SECRET","varValue":null,"shouldPersist":false,"editable":true},{"lambdaId":"e95a8672-a07b-499c-89f2-7c167baced52","varKey":"MAILGUN_API_KEY","varValue":null,"shouldPersist":false,"editable":true},{"lambdaId":"e95a8672-a07b-499c-89f2-7c167baced52","varKey":"MAILGUN_DOMAIN","varValue":null,"shouldPersist":false,"editable":true},{"lambdaId":"e95a8672-a07b-499c-89f2-7c167baced52","varKey":"MAILGUN_TO","varValue":null,"shouldPersist":false,"editable":true},{"lambdaId":"e95a8672-a07b-499c-89f2-7c167baced52","varKey":"MAILGUN_FROM","varValue":null,"shouldPersist":false,"editable":true},{"lambdaId":"e95a8672-a07b-499c-89f2-7c167baced52","varKey":"TWITTER_USER_ID","varValue":null,"shouldPersist":false,"editable":true}],"packageJSON":{"dependencies":{"aws-sdk":{"name":"aws-sdk","version":"2.176.0","notRemovable":true},"twitter":{"name":"twitter","downloadsLast30Days":51205,"downloadsRatio":0.00032130485184729,"humanDownloadsLast30Days":"51.2k","popular":false,"version":"1.7.1","versions":{"0.1.0":"2010-12-22T05:52:58.593Z","0.1.1":"2010-12-22T16:01:47.334Z","0.1.2":"2010-12-23T17:11:40.802Z","0.1.3":"2010-12-24T06:08:16.929Z","0.1.4":"2010-12-29T04:16:24.841Z","0.1.5":"2010-12-31T12:07:12.106Z","0.1.6":"2011-01-02T04:30:17.091Z","0.1.7":"2011-01-04T09:39:24.216Z","0.1.8":"2011-01-04T13:18:03.382Z","0.1.9":"2011-01-04T16:51:24.583Z","0.1.10":"2011-01-05T03:16:36.081Z","0.1.11":"2011-01-10T00:25:52.593Z","0.1.12":"2011-01-13T00:44:15.145Z","0.1.13":"2011-01-14T02:41:17.602Z","0.1.14":"2011-02-08T06:28:42.596Z","0.1.15":"2011-02-18T12:07:29.127Z","0.1.16":"2011-02-19T04:45:55.323Z","0.1.17":"2011-05-08T05:45:39.954Z","0.1.18":"2012-03-06T17:02:09.893Z","0.2.0":"2013-07-18T14:58:52.321Z","0.2.1":"2013-07-18T15:47:16.583Z","0.2.2":"2013-09-06T11:24:04.793Z","0.2.3":"2013-09-23T13:59:31.490Z","0.2.4":"2013-10-23T18:02:22.755Z","0.1.19":"2013-11-13T03:14:05.430Z","0.2.5":"2013-11-13T03:27:37.459Z","0.2.6":"2014-02-21T12:47:24.881Z","0.2.7":"2014-02-24T00:01:22.544Z","0.2.8":"2014-03-05T14:09:24.017Z","0.2.9":"2014-03-13T11:54:15.161Z","0.2.10":"2014-09-07T22:52:19.842Z","0.2.11":"2014-09-07T23:13:56.509Z","0.2.12":"2014-09-09T17:11:29.141Z","0.2.13":"2014-10-28T21:46:12.068Z","1.0.0":"2014-12-13T21:55:03.189Z","1.0.1":"2014-12-13T23:28:09.153Z","1.0.2":"2015-01-08T14:34:24.115Z","1.0.3":"2015-01-16T00:58:11.887Z","1.1.0":"2015-01-24T23:47:09.495Z","1.2.0":"2015-01-25T22:30:11.654Z","1.2.1":"2015-01-25T23:45:02.437Z","1.2.2":"2015-03-07T14:22:52.362Z","1.2.3":"2015-03-07T14:26:00.856Z","1.2.4":"2015-03-12T22:29:15.073Z","1.2.5":"2015-03-16T21:37:10.207Z","1.3.0":"2016-05-14T16:12:51.703Z","1.4.0":"2016-08-03T18:36:37.966Z","1.5.0":"2016-12-02T14:36:51.312Z","1.6.0":"2016-12-11T03:27:55.299Z","1.7.0":"2016-12-11T20:31:40.900Z","1.7.1":"2017-06-13T11:48:37.477Z"},"tags":{"latest":"1.7.1"},"description":"Twitter API client library for node.js","dependencies":{"deep-extend":"^0.5.0","request":"^2.72.0"},"devDependencies":{"eslint":"^3.12.0","mocha":"^3.2.0","nock":"^9.0.2"},"repository":{"url":"https://github.com/desmondmorris/node-twitter","project":"node-twitter","user":"desmondmorris","host":"github.com","path":"","head":"296e82ede50ddace34ad64952fdfacfe8b1c65fc","branch":"296e82ede50ddace34ad64952fdfacfe8b1c65fc"},"githubRepo":{"user":"desmondmorris","project":"node-twitter","path":"","head":"296e82ede50ddace34ad64952fdfacfe8b1c65fc"},"gitHead":"296e82ede50ddace34ad64952fdfacfe8b1c65fc","readme":"# Twitter for Node.js\n\nAn asynchronous client library for the Twitter [REST](https://dev.twitter.com/rest/public) and [Streaming](https://dev.twitter.com/streaming/overview) API's.\n\n[![Build Status](https://travis-ci.org/desmondmorris/node-twitter.svg?branch=master)](https://travis-ci.org/desmondmorris/node-twitter)\n [![NPM](https://nodei.co/npm/twitter.png?mini=true)](https://nodei.co/npm/twitter/)\n\n```javascript\nvar Twitter = require('twitter');\n\nvar client = new Twitter({\n  consumer_key: '',\n  consumer_secret: '',\n  access_token_key: '',\n  access_token_secret: ''\n});\n\nvar params = {screen_name: 'nodejs'};\nclient.get('statuses/user_timeline', params, function(error, tweets, response) {\n  if (!error) {\n    console.log(tweets);\n  }\n});\n```\n\n## Installation\n\n`npm install twitter`\n\n## Quick Start\n\nYou will need valid Twitter developer credentials in the form of a set of consumer and access tokens/keys.  You can get these [here](https://apps.twitter.com/).  Do not forgot to adjust your permissions - most POST request require write permissions.\n\n```javascript\nvar Twitter = require('twitter');\n```\n\n## For User based authentication:\n\n```javascript\nvar client = new Twitter({\n  consumer_key: '',\n  consumer_secret: '',\n  access_token_key: '',\n  access_token_secret: ''\n});\n```\n\nAdd your credentials accordingly.  I would use environment variables to keep your private info safe.  So something like:\n\n```javascript\nvar client = new Twitter({\n  consumer_key: process.env.TWITTER_CONSUMER_KEY,\n  consumer_secret: process.env.TWITTER_CONSUMER_SECRET,\n  access_token_key: process.env.TWITTER_ACCESS_TOKEN_KEY,\n  access_token_secret: process.env.TWITTER_ACCESS_TOKEN_SECRET\n});\n```\n## For Application Only based authentication:\n\nYou will need to fetch a bearer token from Twitter as documented [Here](https://dev.twitter.com/oauth/application-only), once you have it you can use it as follows.\n\n```javascript\nvar client = new Twitter({\n  consumer_key: '',\n  consumer_secret: '',\n  bearer_token: ''\n});\n```\n\nAdd your credentials accordingly.  I would use environment variables to keep your private info safe.  So something like:\n\n```javascript\nvar client = new Twitter({\n  consumer_key: process.env.TWITTER_CONSUMER_KEY,\n  consumer_secret: process.env.TWITTER_CONSUMER_SECRET,\n  bearer_token: process.env.TWITTER_BEARER_TOKEN\n});\n```\n\nNB - You will not have access to all endpoints whilst using Application Only authentication, but you will have access to higher API limits.\n\n## Requests\n\nYou now have the ability to make GET and POST requests against the API via the convenience methods.\n\n```javascript\nclient.get(path, params, callback);\nclient.post(path, params, callback);\nclient.stream(path, params, callback);\n```\n\n## REST API\n\nYou simply need to pass the endpoint and parameters to one of convenience methods.  Take a look at the [documentation site](https://dev.twitter.com/rest/public) to reference available endpoints.\n\nExample, lets get a [list of favorites](https://dev.twitter.com/rest/reference/get/favorites/list):\n\n```javascript\nclient.get('favorites/list', function(error, tweets, response) {\n  if(error) throw error;\n  console.log(tweets);  // The favorites.\n  console.log(response);  // Raw response object.\n});\n```\n\nHow about an example that passes parameters?  Let's  [tweet something](https://dev.twitter.com/rest/reference/post/statuses/update):\n\n```javascript\nclient.post('statuses/update', {status: 'I Love Twitter'},  function(error, tweet, response) {\n  if(error) throw error;\n  console.log(tweet);  // Tweet body.\n  console.log(response);  // Raw response object.\n});\n```\n\n### Promises\n\nThe REST API convenience methods will also return Promises if:\n\n1.  A callback is omitted\n2.  Promise's are available.\n\nIf those two conditions are met, the above example becomes:\n\n```javascript\nclient.post('statuses/update', {status: 'I Love Twitter'})\n  .then(function (tweet) {\n    console.log(tweet);\n  })\n  .catch(function (error) {\n    throw error;\n  })\n```\n\nNote, the raw `response` object returned by the Request module is not passed through\nthe fulfilled promise.  If you require this, please use the callback pattern.\n\n## Streaming API\n\nUsing the `stream` convenience method, you to open and manipulate data via a stream piped directly from one of the streaming API's. Let's see who is talking about javascript:\n\n```javascript\nvar stream = client.stream('statuses/filter', {track: 'javascript'});\nstream.on('data', function(event) {\n  console.log(event && event.text);\n});\n\nstream.on('error', function(error) {\n  throw error;\n});\n\n// You can also get the stream in a callback if you prefer.\nclient.stream('statuses/filter', {track: 'javascript'}, function(stream) {\n  stream.on('data', function(event) {\n    console.log(event && event.text);\n  });\n\n  stream.on('error', function(error) {\n    throw error;\n  });\n});\n```\n\n**Note** twitter stream several types of events, see [the docs](https://dev.twitter.com/streaming/overview/messages-types) for more info. There is no canonical way of detecting tweets versus other messages, but some users have had success with the following strategy.\n\n```javascript\n_ = require('lodash')\nconst isTweet = _.conforms({\n  contributors: _.isObject,\n  id_str: _.isString,\n  text: _.isString,\n})\n```\n\n## Examples\n\n* [Tweet](https://github.com/desmondmorris/node-twitter/tree/master/examples#tweet)\n* [Search](https://github.com/desmondmorris/node-twitter/tree/master/examples#search)\n* [Streams](https://github.com/desmondmorris/node-twitter/tree/master/examples#streams)\n* [Proxy](https://github.com/desmondmorris/node-twitter/tree/master/examples#proxy)\n* [Media](https://github.com/desmondmorris/node-twitter/tree/master/examples#media)\n* [Chunked Media](https://github.com/desmondmorris/node-twitter/tree/master/examples#chunked-media)\n\n## Contributors\n\nOriginally authored by  [@technoweenie](http://github.com/technoweenie)\n and maintained by [@jdub](http://github.com/jdub)\n\nCurrently maintained by [@desmondmorris](http://github.com/desmondmorris)\n\n[And we cannot forget the community](https://github.com/desmondmorris/node-twitter/graphs/contributors)\n","owner":{"name":"desmondmorris","avatar":"https://github.com/desmondmorris.png","link":"https://github.com/desmondmorris"},"deprecated":false,"homepage":null,"license":"MIT","keywords":["twitter","streaming","oauth"],"computedKeywords":[],"computedMetadata":{},"created":1292997177962,"modified":1519392930775,"lastPublisher":{"name":"desmondmorris","email":"hi@desmondmorris.com","avatar":"https://gravatar.com/avatar/d2c4b9870bcda92115a5be8a1076de95","link":"https://www.npmjs.com/~desmondmorris"},"owners":[{"name":"desmondmorris","email":"hi@desmondmorris.com","avatar":"https://gravatar.com/avatar/d2c4b9870bcda92115a5be8a1076de95","link":"https://www.npmjs.com/~desmondmorris"}],"lastCrawl":"2018-06-04T16:28:59.487Z","_searchInternal":{"concatenatedName":"twitter","alternativeNames":["twitter","twitter","twitter"],"downloadsMagnitude":5},"dependents":209,"humanDependents":"209","changelogFilename":null,"objectID":"twitter","_highlightResult":{"name":{"value":"<em>twitter</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["twitter"]},"description":{"value":"<em>Twitter</em> API client library for node.js","matchLevel":"full","fullyHighlighted":false,"matchedWords":["twitter"]},"owner":{"name":{"value":"desmondmorris","matchLevel":"none","matchedWords":[]}},"keywords":[{"value":"<em>twitter</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["twitter"]},{"value":"streaming","matchLevel":"none","matchedWords":[]},{"value":"oauth","matchLevel":"none","matchedWords":[]}],"owners":[{"name":{"value":"desmondmorris","matchLevel":"none","matchedWords":[]}}],"_searchInternal":{"alternativeNames":[{"value":"<em>twitter</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["twitter"]},{"value":"<em>twitter</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["twitter"]},{"value":"<em>twitter</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["twitter"]}]}},"types":"// Type definitions for Twitter for Websites\r\n// Project: https://dev.twitter.com/web/\r\n// Definitions by: Chitoku <https://github.com/chitoku-k>\r\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\r\n\r\n/**\r\n * The interface for Twitter for Websites.\r\n */\r\ninterface Twitter {\r\n    /**\r\n     * All JavaScript code depending on widgets.js should execute on or after this function.\r\n     *\r\n     * @param callback A callback function which will be invoked when widgets.js is ready.\r\n     */\r\n    ready(callback: (twttr: Twitter) => void): void;\r\n    /**\r\n     * Twitter widgets.\r\n     */\r\n    widgets: TwitterWidgets;\r\n    /**\r\n     * Twitter events.\r\n     */\r\n    events: TwitterEvents;\r\n}\r\n\r\n/**\r\n * The interface for Twitter for Websites widgets.\r\n */\r\ninterface TwitterWidgets {\r\n    /**\r\n     * Initialize Twitter for Websites widgets contained within a page.\r\n     */\r\n    load(): void;\r\n    /**\r\n     * Initialize Twitter for Websites widgets contained within children of the element.\r\n     */\r\n    load(element: HTMLElement): void;\r\n    /**\r\n     * Initialize Twitter for Websites widgets contained within children of the elements.\r\n     */\r\n    load(elements: HTMLElement[]): void;\r\n    /**\r\n     * Create a share button for a URL.\r\n     *\r\n     * @param url The URL to be shared.\r\n     * @param target The element in which to render the widget.\r\n     * @param options An object hash of additional options to configure the widget.\r\n     */\r\n    createShareButton(url: string, target: HTMLElement, options?: TwitterButtonWidgetOptions): Promise<HTMLElement>;\r\n    /**\r\n     * Create a follow button for a user.\r\n     *\r\n     * @param screen_name The screen_name of a user to be followed.\r\n     * @param target The element in which to render the widget.\r\n     * @param options An object hash of additional options to configure the widget.\r\n     */\r\n    createFollowButton(screen_name: string, target: HTMLElement, options?: TwitterButtonWidgetOptions): Promise<HTMLElement>;\r\n    /**\r\n     * Create a hashtag button for a hashtag.\r\n     *\r\n     * @param hashtag Hashtag to be Tweeted and displayed on the button.\r\n     * @param target The element in which to render the widget.\r\n     * @param options An object hash of additional options to configure the widget.\r\n     */\r\n    createHashtagButton(hashtag: string, target: HTMLElement, options?: TwitterButtonWidgetOptions): Promise<HTMLElement>;\r\n    /**\r\n     * Create a mention button for a user.\r\n     *\r\n     * @param screen_name The screen_name of a user to be mentioned.\r\n     * @param target The element in which to render the widget.\r\n     * @param options An object hash of additional options to configure the widget.\r\n     */\r\n    createMentionButton(screen_name: string, target: HTMLElement, options?: TwitterButtonWidgetOptions): Promise<HTMLElement>;\r\n    /**\r\n     * Create a timeline widget.\r\n     *\r\n     * @param widgetId The ID of a timeline widget to be rendered.\r\n     * @param target The element in which to render the widget.\r\n     * @param options An object hash of additional options to configure the widget.\r\n     */\r\n    createTimeline(widgetId: string, target: HTMLElement, options?: TwitterTimelineWidgetOptions): Promise<HTMLElement>;\r\n    /**\r\n     * Create an embedded Tweet for a Tweet.\r\n     *\r\n     * @param tweetId The ID of a Tweet to be rendered.\r\n     * @param target The element in which to render the widget.\r\n     * @param options An object hash of additional options to configure the widget.\r\n     */\r\n    createTweet(tweetId: string, target: HTMLElement, options?: TwitterTweetWidgetOptions): Promise<HTMLElement>;\r\n}\r\n\r\n/**\r\n * The interface for additional configuration for all widgets.\r\n */\r\ninterface TwitterWidgetOptions {\r\n    /**\r\n     * Enable Do Not Track for this widget.\r\n     */\r\n    dnt?: boolean;\r\n    /**\r\n     * A list of hashtags to be appended to default Tweet text where appropriate.\r\n     */\r\n    hashtags?: string;\r\n    /**\r\n     * The language in which to render a widget, if supported.\r\n     */\r\n    lang?: string;\r\n    /**\r\n     * A list of Twitter screen names to be suggested for following after a Tweet is posted.\r\n     */\r\n    related?: string;\r\n    /**\r\n     * A Twitter user mentioned in the default Tweet text as /via @user where appropriate.\r\n     */\r\n    via?: string;\r\n}\r\n\r\n/**\r\n * The interface for additional configuration for button widgets.\r\n */\r\ninterface TwitterButtonWidgetOptions extends TwitterWidgetOptions {\r\n    /**\r\n     * The alignment of the button within an iframe; use this to ensure flush layout when aligning buttons against opposite edges of your grid.\r\n     */\r\n    align?: string;\r\n    /**\r\n     * Share button and Follow button only. (Vertical count only available for share buttons.)\r\n     */\r\n    count?: string;\r\n    /**\r\n     * If the canonical URL to be counted is different from the URL to be shared, you can provide this URL to reference the count. (Share button only.)\r\n     */\r\n    counturl?: string;\r\n    /**\r\n     * medium or large\r\n     */\r\n    size?: string;\r\n    /**\r\n     * The default, highlighted text a user sees in the Tweet Web Intent.\r\n     */\r\n    text?: string;\r\n}\r\n\r\n/**\r\n * The interface for additional options for embedded Tweets.\r\n */\r\ninterface TwitterTweetWidgetOptions extends TwitterWidgetOptions {\r\n    /**\r\n     * Float the embedded Tweet to the left or right so that text wraps around it, or align center so it floats in the middle of a paragraph.\r\n     */\r\n    align?: string;\r\n    /**\r\n     * For Tweets that are replies, the previous Tweet in the thread will be displayed by default. Use none to hide the thread and show a Tweet alone.\r\n     */\r\n    conversation?: string;\r\n    /**\r\n     * Toggle whether to render expanded media through Twitter Cards in Tweets. Also applies to images uploaded to Twitter.\r\n     */\r\n    cards?: string;\r\n    /**\r\n     * Fix the width of the embedded widget.\r\n     */\r\n    width?: string|number;\r\n    /**\r\n     * Adjust the color of links inside the widget.\r\n     */\r\n    linkColor?: string;\r\n    /**\r\n     * Toggle the default colorscheme of the widget.\r\n     */\r\n    theme?: string;\r\n}\r\n\r\n/**\r\n * The interface for additional options for embedded Timelines.\r\n */\r\ninterface TwitterTimelineWidgetOptions extends TwitterWidgetOptions, TwitterButtonWidgetOptions, TwitterTweetWidgetOptions {\r\n    /**\r\n     * Apply the specified aria-polite behavior to the rendered timeline.\r\n     */\r\n    ariaPolite?: string;\r\n    /**\r\n     * Fix the height of the embedded widget.\r\n     */\r\n    height?: string|number;\r\n    /**\r\n     * Adjust the color of borders inside the widget.\r\n     */\r\n    borderColor?: string;\r\n    /**\r\n     * Toggle the display of design elements in the widget. This parameter is a space-separated list of values.\r\n     */\r\n    chrome?: string;\r\n    /**\r\n     * Render a timeline statically, displaying only n number of Tweets.\r\n     */\r\n    tweetLimit?: number;\r\n    /**\r\n     * Override the timeline source with this userâs Tweets.\r\n     */\r\n    screenName?: string;\r\n    /**\r\n     * Override the timeline source with this userâs Tweets.\r\n     */\r\n    userId?: string;\r\n    /**\r\n     * When overriding a user timeline, include Tweets that are in reply to to other users.\r\n     */\r\n    showReplies?: boolean;\r\n    /**\r\n     * Override the timeline source with favourite Tweets from this user.\r\n     */\r\n    favoritesScreenName?: string;\r\n    /**\r\n     * Override the timeline source with favourite Tweets from this user.\r\n     */\r\n    favoritesUserId?: string;\r\n    /**\r\n     * Override the timeline source with Tweets from a list owned by this user. Must be used in combination with listId or listSlug.\r\n     */\r\n    listOwnerScreenName?: string;\r\n    /**\r\n     * Override the timeline source with Tweets from a list owned by this user. Must be used in combination with listId or listSlug.\r\n     */\r\n    listOwnerId?: string;\r\n    /**\r\n     * Override the timeline source with Tweets from this list. Must be used in combination with listOwnerId or listOwnerScreenName.\r\n     */\r\n    listId?: string;\r\n    /**\r\n     * Override the timeline source with Tweets from this list. Must be used in combination with listOwnerId or listOwnerScreenName.\r\n     */\r\n    listSlug?: string;\r\n}\r\n\r\n/**\r\n * The interface for Twitter events.\r\n */\r\ninterface TwitterEvents {\r\n    /**\r\n     * Occurs after twttr.widgets.load has initialized widgets in a page, from an embed code. Includes an array of references to the newly created widget nodes.\r\n     *\r\n     * @param name The name of an event.\r\n     * @param callback A callback function which will be invoked.\r\n     */\r\n    bind(name: \"loaded\", callback: (ev: any) => void): void;\r\n    /**\r\n     * Bind an event occurs after an individual widget in a page is rendered. Includes a of reference to the newly created widget node. Occurs at the same time as loaded, but for each individual widget. Also triggered when creating a widget with a factory function.\r\n     *\r\n     * @param name The name of an event.\r\n     * @param callback A callback function which will be invoked.\r\n     */\r\n    bind(name: \"rendered\", callback: (ev: any) => void): void;\r\n    /**\r\n     * Bind an event which will be triggered when the user publishes a Tweet (either new, or a reply) through the Tweet Web Intent.\r\n     *\r\n     * @param name The name of an event.\r\n     * @param callback A callback function which will be invoked.\r\n     */\r\n    bind(name: \"tweet\", callback: (ev: TwitterIntentEvent) => void): void;\r\n    /**\r\n     * Bind an event which will populate the followed user_id in the event objectâs data argument.\r\n     *\r\n     * @param name The name of an event.\r\n     * @param callback A callback function which will be invoked.\r\n     */\r\n    bind(name: \"follow\", callback: (ev: TwitterIntentEvent) => void): void;\r\n    /**\r\n     * Bind an event which will populate the original Tweet that was retweetedâs source_tweet_id in the event objectâs data argument.\r\n     *\r\n     * @param name The name of an event.\r\n     * @param callback A callback function which will be invoked.\r\n     */\r\n    bind(name: \"retweet\", callback: (ev: TwitterIntentEvent) => void): void;\r\n    /**\r\n     * Bind an event which will populate the favorited tweet_id in the event objectâs data argument.\r\n     *\r\n     * @param name The name of an event.\r\n     * @param callback A callback function which will be invoked.\r\n     */\r\n    bind(name: \"favorite\", callback: (ev: TwitterIntentEvent) => void): void;\r\n    /**\r\n     * Bind an event occurs when the user invokes a Web Intent from within an embedded widget.\r\n     *\r\n     * @param name The name of an event.\r\n     * @param callback A callback function which will be invoked.\r\n     */\r\n    bind(name: \"click\", callback: (ev: TwitterIntentEvent) => void): void;\r\n    /**\r\n     * Bind an event.\r\n     *\r\n     * @param name The name of an event.\r\n     * @param callback A callback function which will be invoked.\r\n     */\r\n    bind(name: string, callback: (ev: any) => void): void;\r\n}\r\n\r\n/**\r\n * The interface for an object representing the event is passed to your JavaScript callback.\r\n */\r\ninterface TwitterIntentEvent {\r\n    /**\r\n     * The DOM node where the widget is instantiated. Most like an iframe, but may also be the original embed code element if the widget failed to initialize, or another sandboxed element. Use this value to differentiate between different intents or buttons on the same page.\r\n     */\r\n    target: HTMLElement;\r\n    /**\r\n     * Extended detail indicating where in a widget a user clicked. For example, button, count, or screen name portions of Tweet button or Follow button integrations, or tweet actions within embedded Tweets.\r\n     */\r\n    region: string;\r\n    /**\r\n     * Key/value pairs relevant to the Web Intent just actioned.\r\n     */\r\n    data: TwitterIntentEventData;\r\n    /**\r\n     * The type of the event.\r\n     */\r\n    type: string;\r\n}\r\n\r\n/**\r\n * The interface for a data relevants to the Web Intent just actioned.\r\n */\r\ninterface TwitterIntentEventData {\r\n    /**\r\n     * The ID of a Tweet.\r\n     */\r\n    tweet_id?: string;\r\n    /**\r\n     * The ID of a source Tweet.\r\n     */\r\n    source_tweet_id?: string;\r\n    /**\r\n     * The screen_name of a user;\r\n     */\r\n    screen_name?: string;\r\n    /**\r\n     * The ID of a user.\r\n     */\r\n    user_id?: string;\r\n}\r\n\r\ndeclare var twttr: Twitter;\r\n","typesLocation":"https://unpkg.com/@types/twitter/index.d.ts"},"nodemailer":{"name":"nodemailer","downloadsLast30Days":2148015,"downloadsRatio":0.01218743732593483,"humanDownloadsLast30Days":"2.1m","popular":true,"version":"4.6.7","versions":{"0.1.1":"2011-12-08T11:46:00.690Z","0.1.2":"2011-12-08T11:46:00.690Z","0.1.3":"2011-12-08T11:46:00.690Z","0.1.4":"2011-12-08T11:46:00.690Z","0.1.5":"2011-12-08T11:46:00.690Z","0.1.6":"2011-12-08T11:46:00.690Z","0.1.7":"2011-12-08T11:46:00.690Z","0.1.8":"2011-12-08T11:46:00.690Z","0.1.9":"2011-12-08T11:46:00.690Z","0.1.10":"2011-12-08T11:46:00.690Z","0.1.11":"2011-12-08T11:46:00.690Z","0.1.12":"2011-12-08T11:46:00.690Z","0.1.13":"2011-12-08T11:46:00.690Z","0.1.14":"2011-12-08T11:46:00.690Z","0.1.15":"2011-12-08T11:46:00.690Z","0.1.16":"2011-12-08T11:46:00.690Z","0.1.17":"2011-12-08T11:46:00.690Z","0.1.18":"2011-12-08T11:46:00.690Z","0.1.19":"2011-12-08T11:46:00.690Z","0.1.20":"2011-12-08T11:46:00.690Z","0.1.21":"2011-12-08T11:46:00.690Z","0.1.22":"2011-12-08T11:46:00.690Z","0.1.23":"2011-12-08T11:46:00.690Z","0.1.24":"2011-12-08T11:46:00.690Z","0.2.0":"2011-12-08T11:46:00.690Z","0.2.1":"2011-12-08T11:46:00.690Z","0.2.2":"2011-12-08T11:46:00.690Z","0.2.3":"2011-10-26T08:47:33.209Z","0.2.4":"2011-12-08T11:46:00.690Z","0.3.0":"2012-02-10T14:15:02.643Z","0.3.1":"2012-02-10T21:39:04.825Z","0.3.2":"2012-02-15T09:56:47.842Z","0.3.3":"2012-02-20T08:31:27.983Z","0.3.4":"2012-02-28T10:53:41.780Z","0.3.5":"2012-03-02T11:10:51.971Z","0.3.6":"2012-03-05T20:54:59.703Z","0.3.7":"2012-03-13T20:04:30.600Z","0.3.8":"2012-03-19T09:06:11.949Z","0.3.9":"2012-03-21T09:46:34.315Z","0.3.10":"2012-03-23T11:41:26.307Z","0.3.11":"2012-03-27T11:21:01.442Z","0.3.12":"2012-03-28T17:53:45.409Z","0.3.13":"2012-04-03T08:18:26.700Z","0.3.14":"2012-04-03T09:20:15.952Z","0.3.15":"2012-04-14T19:31:52.930Z","0.3.16":"2012-04-14T20:10:20.459Z","0.3.17":"2012-04-15T04:46:10.614Z","0.3.18":"2012-04-16T11:34:30.598Z","0.3.19":"2012-05-02T20:18:05.389Z","0.3.20":"2012-05-09T07:58:26.148Z","0.3.21":"2012-07-17T10:51:47.944Z","0.3.22":"2012-08-07T13:37:50.843Z","0.3.23":"2012-09-04T12:11:19.786Z","0.3.24":"2012-09-04T12:19:27.129Z","0.3.25":"2012-09-04T16:09:07.947Z","0.3.26":"2012-09-07T06:51:41.923Z","0.3.27":"2012-09-10T10:32:44.951Z","0.3.28":"2012-09-13T07:03:25.663Z","0.3.29":"2012-10-29T09:20:51.368Z","0.3.30":"2012-11-02T20:12:18.759Z","0.3.31":"2012-11-06T08:10:02.212Z","0.3.32":"2012-11-24T21:43:14.158Z","0.3.33":"2012-11-27T12:46:42.932Z","0.3.34":"2012-11-28T09:50:05.280Z","0.3.35":"2012-11-30T11:59:33.065Z","0.3.37":"2012-12-17T13:01:52.516Z","0.3.38":"2013-02-01T10:40:49.878Z","0.3.39":"2013-02-01T10:42:38.402Z","0.3.40":"2013-02-01T22:01:04.827Z","0.3.41":"2013-02-04T08:40:03.006Z","0.3.42":"2013-02-08T13:01:17.931Z","0.3.43":"2013-02-28T13:52:23.785Z","0.3.44":"2013-03-10T17:18:55.904Z","0.4.0":"2013-03-23T07:12:01.389Z","0.4.1":"2013-03-23T20:12:27.190Z","0.4.2":"2013-05-15T13:40:20.243Z","0.4.3":"2013-05-20T11:44:22.125Z","0.4.4":"2013-05-22T10:32:21.059Z","0.5.0":"2013-07-05T08:51:57.943Z","0.5.1":"2013-07-25T07:15:34.950Z","0.5.2":"2013-07-25T20:06:35.818Z","0.5.3":"2013-10-03T07:43:58.717Z","0.5.4":"2013-10-29T11:48:28.789Z","0.5.5":"2013-10-30T09:25:47.522Z","0.5.6":"2013-11-15T13:21:32.854Z","0.5.7":"2013-11-18T11:50:31.508Z","0.5.8":"2013-11-22T14:20:22.659Z","0.5.9":"2013-11-25T12:40:14.592Z","0.5.10":"2013-11-26T12:19:47.565Z","0.5.11":"2013-11-28T06:25:07.250Z","0.5.12":"2013-12-01T22:20:22.061Z","0.5.13":"2013-12-03T09:39:25.933Z","0.5.14":"2013-12-05T13:01:27.452Z","0.5.15":"2013-12-13T10:24:14.159Z","0.6.0":"2013-12-30T12:31:38.670Z","0.6.1":"2014-02-26T09:18:10.782Z","0.6.2":"2014-04-09T14:14:08.248Z","0.6.3":"2014-04-16T08:08:08.235Z","0.6.4":"2014-05-13T06:49:03.233Z","0.6.5":"2014-05-15T07:08:45.146Z","0.7.0":"2014-06-17T14:11:27.334Z","0.7.1":"2014-07-09T06:34:56.966Z","1.0.0-rc.1":"2014-07-10T20:07:53.621Z","1.0.0":"2014-07-15T13:17:44.953Z","1.0.1":"2014-07-15T15:22:47.326Z","1.0.2":"2014-07-16T08:07:35.007Z","1.0.3":"2014-07-16T18:32:56.705Z","1.0.4":"2014-07-23T09:51:35.028Z","1.1.0":"2014-07-29T15:21:42.577Z","1.1.1":"2014-07-30T10:54:56.382Z","1.1.2":"2014-08-18T07:43:21.875Z","1.2.0":"2014-08-18T08:53:19.637Z","1.2.1":"2014-08-21T13:34:21.459Z","1.2.2":"2014-09-05T14:31:29.857Z","1.3.0":"2014-09-12T11:57:30.564Z","1.3.1":"2015-02-18T20:06:38.208Z","1.3.2":"2015-03-09T20:52:38.963Z","1.3.3":"2015-04-15T08:28:43.006Z","1.3.4":"2015-04-15T09:45:48.169Z","1.4.0":"2015-06-27T19:25:00.371Z","1.5.0":"2015-09-24T12:31:05.103Z","1.6.0":"2015-10-05T15:25:58.077Z","1.7.0":"2015-10-06T07:50:26.241Z","1.8.0":"2015-10-08T10:58:53.711Z","1.9.0":"2015-11-09T14:47:22.989Z","1.10.0":"2015-11-13T15:09:48.545Z","1.11.0":"2015-12-28T13:03:11.049Z","2.0.0-beta.0":"2015-12-31T11:33:54.780Z","2.0.0-beta.1":"2016-01-02T22:58:49.874Z","2.0.0-beta.2":"2016-01-04T13:16:31.933Z","2.0.0-rc.1":"2016-01-04T15:21:35.962Z","2.0.0-rc.2":"2016-01-04T15:28:28.962Z","2.0.0":"2016-01-11T15:45:39.657Z","2.1.0-beta.0":"2016-01-19T22:09:04.113Z","2.1.0-beta.1":"2016-01-20T12:52:31.136Z","2.1.0-beta.2":"2016-01-20T15:03:16.386Z","2.1.0-beta.3":"2016-01-20T20:52:55.403Z","2.1.0-rc.0":"2016-01-20T21:36:53.344Z","2.1.0-rc.1":"2016-01-25T12:42:09.350Z","2.1.0":"2016-02-01T13:44:33.407Z","2.2.0-beta.0":"2016-02-05T17:19:25.002Z","2.2.0-beta.1":"2016-02-06T18:14:13.837Z","2.2.0-beta.2":"2016-02-10T17:34:31.827Z","2.2.0-beta.3":"2016-02-10T18:16:03.096Z","2.2.0-beta.4":"2016-02-10T18:19:48.447Z","2.2.0-beta.5":"2016-02-10T19:27:38.921Z","2.2.0-beta.6":"2016-02-11T14:27:59.247Z","2.2.0-rc.7":"2016-02-12T12:43:52.156Z","2.2.0-rc.8":"2016-02-13T11:52:36.069Z","2.2.0-rc.9":"2016-02-15T11:59:13.152Z","2.2.0-rc.10":"2016-02-16T17:27:30.843Z","2.2.0-rc.11":"2016-02-17T20:25:13.259Z","2.2.0":"2016-02-18T09:59:48.311Z","2.2.1":"2016-02-20T09:22:52.771Z","2.3.0-beta.0":"2016-02-22T12:10:20.274Z","2.3.0-beta.1":"2016-02-25T11:31:59.605Z","2.3.0-rc.2":"2016-02-25T12:27:35.429Z","2.3.0-rc.3":"2016-02-29T21:19:04.908Z","2.3.0":"2016-03-03T08:57:46.838Z","2.3.1-rc.0":"2016-03-25T15:42:33.416Z","2.3.1":"2016-04-08T09:32:49.284Z","2.3.2":"2016-04-11T18:59:54.653Z","2.4.0-beta.0":"2016-05-07T06:52:51.441Z","2.4.0":"2016-05-11T11:30:36.470Z","2.4.1":"2016-05-12T14:55:59.526Z","2.4.2":"2016-05-25T20:49:19.248Z","2.5.0":"2016-07-08T19:44:41.644Z","2.6.0":"2016-09-05T13:18:55.557Z","2.6.1":"2016-09-21T17:56:07.015Z","2.6.2":"2016-09-21T18:02:02.760Z","2.6.3":"2016-09-21T18:04:53.705Z","2.6.4":"2016-09-21T18:06:21.327Z","2.7.0":"2016-12-08T10:11:09.437Z","2.7.1":"2017-01-22T14:41:15.549Z","2.7.2":"2017-01-22T18:18:24.777Z","3.0.0":"2017-01-31T10:17:16.780Z","3.0.1":"2017-02-03T16:33:02.048Z","3.0.2":"2017-02-04T09:25:17.953Z","3.1.0":"2017-02-13T16:53:31.046Z","3.1.1":"2017-02-15T08:00:17.966Z","3.1.2":"2017-02-17T10:35:56.794Z","3.1.3":"2017-02-17T13:09:31.194Z","3.1.4":"2017-02-26T13:06:48.662Z","3.1.5":"2017-03-08T16:34:20.242Z","3.1.6":"2017-03-14T14:05:04.524Z","3.1.7":"2017-03-14T17:18:15.861Z","3.1.8":"2017-03-21T08:12:29.037Z","4.0.0":"2017-04-06T17:39:41.765Z","4.0.1":"2017-04-13T10:18:26.527Z","4.1.0":"2017-08-28T11:55:35.788Z","4.1.1":"2017-09-25T18:17:29.933Z","4.1.2":"2017-10-03T09:38:43.984Z","4.1.3":"2017-10-06T06:43:33.094Z","4.2.0":"2017-10-13T18:07:25.501Z","4.3.0":"2017-10-23T09:07:17.418Z","4.3.1":"2017-10-25T07:32:18.262Z","4.4.0":"2017-11-10T11:39:22.321Z","4.4.1":"2017-12-08T10:17:51.419Z","4.4.2":"2018-01-20T12:08:36.938Z","4.5.0":"2018-02-21T11:45:03.703Z","4.6.0":"2018-02-22T16:50:45.722Z","4.6.1":"2018-03-06T07:58:33.156Z","4.6.2":"2018-03-06T09:31:43.093Z","4.6.3":"2018-03-14T08:12:56.949Z","4.6.4":"2018-03-31T13:34:37.879Z","4.6.5":"2018-05-23T08:29:59.498Z","4.6.6":"2018-06-10T11:06:23.084Z","4.6.7":"2018-06-15T10:55:26.987Z"},"tags":{"latest":"4.6.7","beta":"2.4.0-beta.0"},"description":"Easy as cake e-mail sending from your Node.js applications","dependencies":{},"devDependencies":{"bunyan":"^1.8.12","chai":"^4.1.2","eslint-config-nodemailer":"^1.2.0","grunt":"^1.0.3","grunt-cli":"^1.2.0","grunt-eslint":"^20.2.0","grunt-mocha-test":"^0.13.3","libbase64":"^1.0.2","libmime":"^3.1.0","libqp":"^1.1.0","mocha":"^5.2.0","proxy":"^0.2.4","proxy-test-server":"^1.0.0","sinon":"^5.1.1","smtp-server":"^3.4.5"},"repository":{"url":"https://github.com/nodemailer/nodemailer","project":"nodemailer","user":"nodemailer","host":"github.com","path":"","head":"9464025862293e549bb322036c16dfb5c3521b34","branch":"9464025862293e549bb322036c16dfb5c3521b34"},"githubRepo":{"user":"nodemailer","project":"nodemailer","path":"","head":"9464025862293e549bb322036c16dfb5c3521b34"},"gitHead":"9464025862293e549bb322036c16dfb5c3521b34","readme":"# Nodemailer\n[![Backers on Open Collective](https://opencollective.com/nodemailer/backers/badge.svg)](#backers) [![Sponsors on Open Collective](https://opencollective.com/nodemailer/sponsors/badge.svg)](#sponsors) \n\n[![Nodemailer](https://raw.githubusercontent.com/nodemailer/nodemailer/master/assets/nm_logo_200x136.png)](https://nodemailer.com/about/)\n\nSend e-mails from Node.js â easy as cake! ð°âï¸\n\n[![NPM](https://nodei.co/npm/nodemailer.png?downloads=true&downloadRank=true&stars=true)](https://nodemailer.com/about/)\n\nSee [nodemailer.com](https://nodemailer.com/) for documentation and terms.\n\n## Having an issue?\n\n#### First review the docs\n\nDocumentation for Nodemailer can be found at [nodemailer.com](https://nodemailer.com/about/)\n\n#### Nodemailer throws a SyntaxError for \"...\"\n\nYou are using older Node.js version than v6.0. Upgrade Node.js to get support for the spread operator\n\n#### I'm having issues with Gmail\n\nGmail either works well or it does not work at all. It is probably easier to switch to an alternative service instead of fixing issues with Gmail. If Gmail does not work for you then don't use it.\n\n#### I get ETIMEDOUT errors\n\nCheck your firewall settings. Timeout usually occurs when you try to open a connection to a port that is firewalled either on the server or on your machine\n\n#### I get TLS errors\n\nIf you are running the code in your own machine, then check your antivirus settings. Antiviruses often mess around with email ports usage. Node.js might not recognize the MITM cert your antivirus is using.\n\n#### I have a different problem\n\nIf you are having issues with Nodemailer, then the best way to find help would be [Stack Overflow](https://stackoverflow.com/search?q=nodemailer) or revisit the [docs](https://nodemailer.com/about/).\n\n\n\n## Contributors\n\nThis project exists thanks to all the people who contribute. [[Contribute](CONTRIBUTING.md)].\n<a href=\"graphs/contributors\"><img src=\"https://opencollective.com/nodemailer/contributors.svg?width=890\" /></a>\n\n\n## Backers\n\nThank you to all our backers! ð [[Become a backer](https://opencollective.com/nodemailer#backer)]\n\n<a href=\"https://opencollective.com/nodemailer#backers\" target=\"_blank\"><img src=\"https://opencollective.com/nodemailer/backers.svg?width=890\"></a>\n\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up on our README on Github with a link to your website. [[Become a sponsor](https://opencollective.com/nodemailer#sponsor)]\n\n<a href=\"https://opencollective.com/nodemailer/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nodemailer/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nodemailer/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nodemailer/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nodemailer/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nodemailer/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nodemailer/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nodemailer/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nodemailer/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nodemailer/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nodemailer/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nodemailer/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nodemailer/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nodemailer/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nodemailer/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nodemailer/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nodemailer/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nodemailer/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nodemailer/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nodemailer/sponsor/9/avatar.svg\"></a>\n\n\n\n### License\n\nNodemailer is licensed under the **MIT license**\n\n--------------------------------------------------------------------------------\n\nThe Nodemailer logo was designed by [Sven Kristjansen](https://www.behance.net/kristjansen).\n\n","owner":{"name":"nodemailer","avatar":"https://github.com/nodemailer.png","link":"https://github.com/nodemailer"},"deprecated":false,"homepage":"https://nodemailer.com/","license":"MIT","keywords":["Nodemailer"],"computedKeywords":[],"computedMetadata":{},"created":1295638023164,"modified":1529060131062,"lastPublisher":{"name":"andris","email":"andris@kreata.ee","avatar":"https://gravatar.com/avatar/be4ab931ec593eb8fd598f471456e13c","link":"https://www.npmjs.com/~andris"},"owners":[{"name":"andris","email":"andris@node.ee","avatar":"https://gravatar.com/avatar/9493c04dba05c898b99e214ca27996f3","link":"https://www.npmjs.com/~andris"}],"lastCrawl":"2018-06-15T10:55:32.489Z","_searchInternal":{"concatenatedName":"nodemailer","alternativeNames":["nodemailer","nodemailer","nodemailer"],"popularName":"nodemailer","downloadsMagnitude":7},"dependents":1703,"humanDependents":"1.7k","changelogFilename":"https://raw.githubusercontent.com/nodemailer/nodemailer/9464025862293e549bb322036c16dfb5c3521b34/CHANGELOG.md","objectID":"nodemailer","_highlightResult":{"name":{"value":"<em>nodemailer</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["nodemailer"]},"description":{"value":"Easy as cake e-mail sending from your Node.js applications","matchLevel":"none","matchedWords":[]},"owner":{"name":{"value":"<em>nodemailer</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["nodemailer"]}},"keywords":[{"value":"<em>Nodemailer</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["nodemailer"]}],"owners":[{"name":{"value":"andris","matchLevel":"none","matchedWords":[]}}],"_searchInternal":{"alternativeNames":[{"value":"<em>nodemailer</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["nodemailer"]},{"value":"<em>nodemailer</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["nodemailer"]},{"value":"<em>nodemailer</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["nodemailer"]}],"popularName":{"value":"<em>nodemailer</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["nodemailer"]}}},"types":"// Type definitions for Nodemailer 4.6\r\n// Project: https://github.com/nodemailer/nodemailer\r\n// Definitions by: Rogier Schouten <https://github.com/rogierschouten>\r\n//                 Piotr Roszatycki <https://github.com/dex4er>\r\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\r\n// TypeScript Version: 2.3\r\n\r\n/// <reference types=\"node\" />\r\n\r\nimport JSONTransport = require('./lib/json-transport');\r\nimport Mail = require('./lib/mailer');\r\nimport MailMessage = require('./lib/mailer/mail-message');\r\nimport SendmailTransport = require('./lib/sendmail-transport');\r\nimport SESTransport = require('./lib/ses-transport');\r\nimport SMTPPool = require('./lib/smtp-pool');\r\nimport SMTPTransport = require('./lib/smtp-transport');\r\nimport StreamTransport = require('./lib/stream-transport');\r\n\r\nexport type SendMailOptions = Mail.Options;\r\n\r\nexport type SentMessageInfo = any;\r\n\r\nexport type Transporter = Mail;\r\n\r\nexport interface Transport {\r\n    mailer?: Mail;\r\n\r\n    name: string;\r\n    version: string;\r\n\r\n    send(mail: MailMessage, callback: (err: Error | null, info: SentMessageInfo) => void): void;\r\n\r\n    verify?(callback: (err: Error | null, success: true) => void): void;\r\n    verify?(): Promise<true>;\r\n\r\n    close?(): void;\r\n}\r\n\r\nexport interface TransportOptions {\r\n    component?: string;\r\n}\r\n\r\nexport interface TestAccount {\r\n    user: string;\r\n    pass: string;\r\n    smtp: { host: string, port: number, secure: boolean };\r\n    imap: { host: string, port: number, secure: boolean };\r\n    pop3: { host: string, port: number, secure: boolean };\r\n    web: string;\r\n}\r\n\r\nexport function createTransport(transport?: SMTPTransport | SMTPTransport.Options | string, defaults?: SMTPTransport.Options): Mail;\r\nexport function createTransport(transport: SMTPPool | SMTPPool.Options, defaults?: SMTPPool.Options): Mail;\r\nexport function createTransport(transport: SendmailTransport | SendmailTransport.Options, defaults?: SendmailTransport.Options): Mail;\r\nexport function createTransport(transport: StreamTransport | StreamTransport.Options, defaults?: StreamTransport.Options): Mail;\r\nexport function createTransport(transport: JSONTransport | JSONTransport.Options, defaults?: JSONTransport.Options): Mail;\r\nexport function createTransport(transport: SESTransport | SESTransport.Options, defaults?: SESTransport.Options): Mail;\r\nexport function createTransport(transport: Transport | TransportOptions, defaults?: TransportOptions): Mail;\r\n\r\nexport function createTestAccount(apiUrl: string, callback: (err: Error | null, testAccount: TestAccount) => void): void;\r\nexport function createTestAccount(callback: (err: Error | null, testAccount: TestAccount) => void): void;\r\nexport function createTestAccount(apiUrl?: string): Promise<TestAccount>;\r\n\r\nexport function getTestMessageUrl(info: SESTransport.SentMessageInfo | SMTPTransport.SentMessageInfo): string | false;\r\n","typesLocation":"https://unpkg.com/@types/nodemailer/index.d.ts"},"nodemailer-mailgun-transport":{"name":"nodemailer-mailgun-transport","downloadsLast30Days":20434,"downloadsRatio":0.0001282207468537745,"humanDownloadsLast30Days":"20.4k","popular":false,"version":"1.4.0","versions":{"0.0.1":"2014-10-18T20:49:18.132Z","0.0.2":"2015-02-14T02:47:57.999Z","0.0.3":"2015-02-14T03:07:01.976Z","1.0.0":"2015-02-14T03:33:58.231Z","1.0.1":"2015-07-08T17:13:57.923Z","1.0.2":"2016-05-05T01:08:19.486Z","1.1.0":"2016-05-29T16:27:26.463Z","1.2.0":"2016-06-28T07:52:13.316Z","1.2.1":"2016-07-04T22:52:57.603Z","1.2.2":"2016-08-26T16:11:33.564Z","1.2.3":"2016-12-22T17:26:49.656Z","1.2.4":"2016-12-25T18:35:43.531Z","1.3.4":"2017-04-10T02:16:47.044Z","1.3.5":"2017-05-03T16:14:06.050Z","1.3.6":"2017-11-27T21:08:45.311Z","1.4.0":"2018-05-04T21:56:34.716Z"},"tags":{"latest":"1.4.0"},"description":"A transport module to use with nodemailer to leverage Mailgun&#39;s REST API","dependencies":{"lodash.pickby":"^4.3.0","lodash.some":"^4.3.0","lodash.startswith":"^4.0.1","async-series":"0.0.1","consolidate":"^0.14.0","mailgun-js":"^0.18.0"},"devDependencies":{"chai":"^3.5.0","mocha":"^2.4.5","mocha-sinon":"^1.1.5","sinon":"^1.17.4","sinon-chai":"^2.8.0"},"repository":{"url":"https://github.com/orliesaurus/nodemailer-mailgun-transport","project":"nodemailer-mailgun-transport","user":"orliesaurus","host":"github.com","path":"","head":"1b175ff53eaa71a4c5116f1938130551a07136eb","branch":"1b175ff53eaa71a4c5116f1938130551a07136eb"},"githubRepo":{"user":"orliesaurus","project":"nodemailer-mailgun-transport","path":"","head":"1b175ff53eaa71a4c5116f1938130551a07136eb"},"gitHead":"1b175ff53eaa71a4c5116f1938130551a07136eb","readme":"nodemailer-mailgun-transport\n============================\n\n## What is this?\nnodemailer is an amazing node module to send emails within any of your nodejs apps.\nThis is the transport plugin that goes with nodemailer to send email using [Mailgun](https://mailgun.com/)'s awesomeness!\nPow Pow.\n\n\n## How does it work?\nBased on [this mailgun-js module](https://github.com/1lobby/mailgun-js) and the [nodemailer module](https://github.com/andris9/Nodemailer), the Mailgun Transport was born. This is a transport layer, meaning it will allow you to send emails using nodemailer, using the Mailgun API instead of the SMTP protocol!\n\nNodemailer allows you to write code once and then swap out the transport so you can use different accounts on different providers. On top of that it's a super solid way of sending emails quickly on your node app(s).\n\nThe Mailgun transport for nodemailer is great to use when SMTP is blocked on your server or you just prefer the reliability of the web api!\n\n## Support the project\nI know this is a tiny module but many people use it in production (high5 to all of us) - if you happen to use this module please click the star button - it means a lot to all the contributors ![](https://i.snag.gy/oef5di.jpg)\n## Quickstart - Example\n\nCreate a new file, install the dependencies **[1]** and look at the skeleton code below to get you started quickly!\n\n\n```javascript\nvar nodemailer = require('nodemailer');\nvar mg = require('nodemailer-mailgun-transport');\n\n// This is your API key that you retrieve from www.mailgun.com/cp (free up to 10K monthly emails)\nvar auth = {\n  auth: {\n    api_key: 'key-1234123412341234',\n    domain: 'one of your domain names listed at your https://mailgun.com/app/domains'\n  },\n  proxy: 'http://user:pass@localhost:8080' // optional proxy, default is false\n}\n\nvar nodemailerMailgun = nodemailer.createTransport(mg(auth));\n\nnodemailerMailgun.sendMail({\n  from: 'myemail@example.com',\n  to: 'recipient@domain.com', // An array if you have multiple recipients.\n  cc:'second@domain.com',\n  bcc:'secretagent@company.gov',\n  subject: 'Hey you, awesome!',\n  'h:Reply-To': 'reply2this@company.com',\n  //You can use \"html:\" to send HTML email content. It's magic!\n  html: '<b>Wow Big powerful letters</b>',\n  //You can use \"text:\" to send plain-text content. It's oldschool!\n  text: 'Mailgun rocks, pow pow!'\n}, function (err, info) {\n  if (err) {\n    console.log('Error: ' + err);\n  }\n  else {\n    console.log('Response: ' + info);\n  }\n});\n```\n## Buffer support\n\nExample:\n\n```\nvar mailOptions = {\n    ...\n    attachments: [\n        {\n            filename: 'text2.txt',\n            content: new Buffer('hello world!','utf-8')\n        },\n```\n\nwith encoded string as attachment content:\n\n```\nvar mailOptions = {\n    ...\n    attachments: [\n        {\n            filename: 'text1.txt',\n            content: 'aGVsbG8gd29ybGQh',\n            encoding: 'base64'\n        },\n```\n\nwith encoded string as an inline attachment:\n\n```\n// Replace `filename` with `cid`\nvar mailOptions = {\n    ...\n    attachments: [\n        {\n            cid: 'logo.png',\n            content: 'aGVsbG8gd29ybGQh',\n            encoding: 'base64'\n        },\n```\n```\n<!-- Reference the `cid` in your email template file -->\n<img src=\"cid:logo.png\" alt=\"logo\" />\n```\n## Address objects\nThe \"from\", \"to\", \"cc\", and \"bcc\" fields support an address object or array of address objects. Each \"name\" and \"address\" are converted to  ```\"name <address>\"``` format.  \"name\" is optional, \"address\" is required. Missing or null address in object is skipped.\n\nExamples:\n```\n from: {name: 'Sales', address: 'sales@example.com'},\n to: [{name:'Mary', address:'mary@differentexample.com'}, {address:'john@anotherexample.com'}]\n\n```\nis converted to:\n```\n  from: 'Sales <sales@example.com>',\n  to: 'Mary <mary@differentexample.com>,john@anotherexample.com'\n```\n## Now with Consolidate.js templates\n\nIf you pass a \"template\" key an object that contains a \"name\" key, an \"engine\" key and, optionally, a \"context\" object, you can use Handlebars templates to generate the HTML for your message. Like so:\n\n```javascript\nvar handlebars = require('handlebars');\n\nvar contextObject = {\n  variable1: 'value1',\n  variable2: 'value2'\n};\n\nnodemailerMailgun.sendMail({\n  from: 'myemail@example.com',\n  to: 'recipient@domain.com', // An array if you have multiple recipients.\n  subject: 'Hey you, awesome!',\n  template: {\n    name: 'email.hbs',\n    engine: 'handlebars',\n    context: contextObject\n  }\n}, function (err, info) {\n  if (err) {\n    console.log('Error: ' + err);\n  }\n  else {\n    console.log('Response: ' + info);\n  }\n});\n```\n\nYou can use any of the templating engines supported by [Consolidate.js](https://github.com/tj/consolidate.js/). Just require the engine module in your script, and pass a string of the engine name to the `template` object. Please see the Consolidate.js documentation for supported engines.\n\n**[1]** Quickly install dependencies\n```bash\nnpm install nodemailer\nnpm install nodemailer-mailgun-transport\n```\n","owner":{"name":"orliesaurus","avatar":"https://github.com/orliesaurus.png","link":"https://github.com/orliesaurus"},"deprecated":false,"homepage":"http://mailgun.com","license":null,"keywords":["email","nodemailer","mailgun"],"computedKeywords":[],"computedMetadata":{},"created":1413665358132,"modified":1525470998270,"lastPublisher":{"name":"orliesaurus","email":"orlando@opensauce.it","avatar":"https://gravatar.com/avatar/7aa237dc582e31586fdf486023757d3a","link":"https://www.npmjs.com/~orliesaurus"},"owners":[{"name":"orliesaurus","email":"orlando@opensauce.it","avatar":"https://gravatar.com/avatar/7aa237dc582e31586fdf486023757d3a","link":"https://www.npmjs.com/~orliesaurus"}],"lastCrawl":"2018-06-04T13:10:55.484Z","_searchInternal":{"concatenatedName":"nodemailermailguntransport","alternativeNames":["nodemailermailguntransport","nodemailer mailgun transport","nodemailer-mailgun-transport"],"downloadsMagnitude":5},"dependents":35,"humanDependents":"35","changelogFilename":null,"objectID":"nodemailer-mailgun-transport","_highlightResult":{"name":{"value":"<em>nodemailer-mailgun-transport</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["nodemailer","mailgun","transport"]},"description":{"value":"A transport module to use with nodemailer to leverage Mailgun's REST API","matchLevel":"none","matchedWords":[]},"owner":{"name":{"value":"orliesaurus","matchLevel":"none","matchedWords":[]}},"keywords":[{"value":"email","matchLevel":"none","matchedWords":[]},{"value":"nodemailer","matchLevel":"none","matchedWords":[]},{"value":"mailgun","matchLevel":"none","matchedWords":[]}],"owners":[{"name":{"value":"orliesaurus","matchLevel":"none","matchedWords":[]}}],"_searchInternal":{"alternativeNames":[{"value":"<em>nodemailermailguntransport</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["nodemailer","mailgun","transport"]},{"value":"<em>nodemailer mailgun transport</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["nodemailer","mailgun","transport"]},{"value":"<em>nodemailer-mailgun-transport</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["nodemailer","mailgun","transport"]}]}},"types":"// Type definitions for nodemailer-mailgun-transport 1.3\n// Project: https://github.com/orliesaurus/nodemailer-mailgun-transport\n// Definitions by: Oto Ciulis <https://github.com/otociulis>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.3\n\nimport * as nodemailer from 'nodemailer';\nimport Mail = require('nodemailer/lib/mailer');\nimport MailMessage = require('nodemailer/lib/mailer/mail-message');\n\ndeclare namespace mailgunTransport {\n    interface AuthOptions {\n        api_key: string;\n        domain?: string;\n    }\n\n    interface Options {\n        auth: AuthOptions;\n    }\n\n    type MailOptions = Mail.Options;\n\n    type Information = object;\n\n    class MailgunTransport implements nodemailer.Transport {\n        name: string;\n        version: string;\n        send(mail: MailMessage, callback: (err: Error | null, info?: Information) => void): void;\n    }\n}\n\ndeclare function mailgunTransport(options: mailgunTransport.Options): mailgunTransport.MailgunTransport;\n\nexport = mailgunTransport;\n","typesLocation":"https://unpkg.com/@types/nodemailer-mailgun-transport/index.d.ts"}}},"lambdaId":"e95a8672-a07b-499c-89f2-7c167baced52","additionalFiles":[]},"PROJECT_META":{"projectName":"tweetmon","projectDescription":"monitor on retweet","projectVersion":"1.0.0","projectRegion":"us-west-1","repoName":"tweetmon","repoUrl":"https://github.com/antmanler/tweetmon","lastSave":1529326161287}}